package com.chinaservices.oms.dispatch.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.chinaservices.sdk.binding.annotation.Table;
import com.jfinal.plugin.activerecord.Model;
import com.jfinal.plugin.activerecord.Page;

/*import javafx.print.JobSettings;
*/
/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
@Table(tableName = "cs_dispatch_order", pkName = "id")
public class CsDispatchOrder extends Model<CsDispatchOrder> {
	private static final long serialVersionUID = 1L;
	public static final CsDispatchOrder dao = new CsDispatchOrder();
	
	/**
	 * 根据系统订单号数组查询派车单
	 * @param orderNos 系统订单号数组
	 * @return List<CsDispatchOrder>
	 */
	public List<CsDispatchOrder> getDispatchOrdersByOrderNos(String[] orderNos) {
		List<CsDispatchOrder> dispatchOrders;
		// 非空判断
		if (null==orderNos || orderNos.length<1) {
			dispatchOrders = new ArrayList<>();
			return dispatchOrders;
		}
		// 通过系统订单号查询派车单
		StringBuffer sql = new StringBuffer("select t.* from cs_dispatch_order t where t.order_no in ( ");
		for (int i = 0, j = orderNos.length; i < j; i++) {
			sql.append("?");
			if (i < (j - 1)) {
				sql.append(",");
			}
		}
		sql.append(")");
		dispatchOrders = find(sql.toString(), orderNos);
		return dispatchOrders;
	}
	
	/**
	 * 根据系统派车单号数组查询派车单
	 * @param dispatchNos 系统派车单号数组
	 * @return List<CsDispatchOrder>
	 */
	public List<CsDispatchOrder> getDispatchByDispatchNos(String[] dispatchNos) {
		List<CsDispatchOrder> dispatchOrders;
		// 非空判断
		if (null==dispatchNos || dispatchNos.length<1) {
			dispatchOrders = new ArrayList<>();
			return dispatchOrders;
		}
		// 通过系统订单号查询派车单
		StringBuffer sql = new StringBuffer("select t.* from cs_dispatch_order t where t.dispatch_no in ( ");
		for (int i = 0, j = dispatchNos.length; i < j; i++) {
			sql.append("?");
			if (i < (j - 1)) {
				sql.append(",");
			}
		}
		sql.append(")");
		dispatchOrders = find(sql.toString(), dispatchNos);
		return dispatchOrders;
	}
	
	/**
	 * 通过派车单ID查询出派车单信息
	 * @param id
	 * @return
	 */
	public CsDispatchOrder getDispatchById(Integer id){
		List<CsDispatchOrder> dispatchOrders;
				
		// 非空判断
		if (id != null) {
			// 通过派车单ID查询出派车单信息
	        StringBuilder extSql = new StringBuilder();
	        extSql.append(" select t.*, ");
	        extSql.append(" (select count(csde.total_amount) from cs_dispatch_fee csde where csde.dispatch_no = t.dispatch_no) as total_amount,");
	        extSql.append(" concat(csor.shipper_province_name,csor.shipper_city_name,csor.shipper_county_name) as shipper,");
	        extSql.append(" csor.shipper_address,");
	        extSql.append(" concat(csor.consignee_province_name,csor.consignee_city_name,csor.consignee_county_name) as consignee,");
	        extSql.append(" csor.consignee_address");
	        extSql.append(" from cs_dispatch_order t ");
	        extSql.append(" LEFT JOIN cs_order csor on csor.order_no = t.order_no ");
	        extSql.append(" where 1=1");
	        extSql.append(" and t.id = ?");
			dispatchOrders = find(extSql.toString(), id);
			if(dispatchOrders.isEmpty()){
				return null;
			}
		}else{
			return null;
		}
		
		return dispatchOrders.get(0);
	}
	
	/**
     * 分页查询
     *
     * @param params
     * @param pageNo
     * @param pageSize
     * @return
     */
    public Page<CsDispatchOrder> getPageByCondition(Map<String, Object> params, int pageNo, int pageSize) {
        String selectSql = "select t.*, ";
        selectSql+=" (select count(csde.total_amount) from cs_dispatch_fee csde where csde.dispatch_no = t.dispatch_no) as total_amount";
        StringBuilder extSql = new StringBuilder();
        extSql.append(" from cs_dispatch_order t where 1=1 ");
        
        String dispatch_no=(String)params.get("dispatch_no");
        String order_no=(String)params.get("order_no");
        String order_no_like=(String)params.get("order_no_like");
        String carrier_code=(String)params.get("carrier_code");
        String is_generate_cost=(String)params.get("is_generate_cost");
        String create_time_from = (String)params.get("create_time_from");
        String create_time_to =(String)params.get("create_time_to");
        String tenancy=(String)params.get("tenancy");
        List<String> param=new ArrayList<String>();
        if(StringUtils.isNotBlank(dispatch_no)){
        	extSql.append(" and dispatch_no like ?");
        	param.add("%"+dispatch_no+"%");
        }
        if(StringUtils.isNotBlank(order_no)){
        	extSql.append(" and order_no = ?");
        	param.add(order_no);
        }
        if(StringUtils.isNotBlank(order_no_like)){
        	extSql.append(" and order_no like ?");
        	param.add("%" + order_no_like + "%");
        }
        
        if(StringUtils.isNotBlank(carrier_code)){
        	extSql.append(" and carrier_code=?");
        	param.add(carrier_code);
        }
        
        if(StringUtils.isNotBlank(create_time_from)){
        	extSql.append(" and create_time >= ?");
        	param.add(create_time_from + " 00:00:00");
        }
        if(StringUtils.isNotBlank(create_time_to)){
        	extSql.append(" and create_time <= ?");
        	param.add(create_time_to + " 23:59:59");
        }
        
        if(StringUtils.isNotBlank(is_generate_cost)){
        	if("1".equals(is_generate_cost)){
            	extSql.append(" and (select count(csde.total_amount) from cs_dispatch_fee csde where csde.dispatch_no = t.dispatch_no) > 0");
            }else{
            	extSql.append(" and (select count(csde.total_amount) from cs_dispatch_fee csde where csde.dispatch_no = t.dispatch_no) <= 0");
            }
        }
        
        if(StringUtils.isNotBlank(tenancy)){
        	extSql.append(" and tenancy = ?");
        	param.add(tenancy);
        }
        extSql.append(" order by t.create_time desc");
        if(param.isEmpty()){
        	return paginate(pageNo, pageSize, selectSql, extSql.toString());

        }else{
        	return paginate(pageNo, pageSize, selectSql, extSql.toString(),param.toArray());
        }
    }
    
    /**
     * 分页查询
     *
     * @param params
     * @param pageNo
     * @param pageSize
     * @return
     */
    public Page<CsDispatchOrder> getPageByConditionForWx(Map<String, Object> params, int pageNo, int pageSize) {
        String selectSql = "select d.*,csds.log_status,"
        		+ "o.shipper_contact_name,o.shipper_contact_mobile,o.consignee_contact_name,o.consignee_contact_mobile,"
        		+ " timestampdiff(HOUR,d.create_time,now()) as time_diff ";
        
        StringBuilder extSql = new StringBuilder();
        extSql.append(" FROM cs_dispatch_stowage_log csds");
        extSql.append(" LEFT JOIN cs_dispatch_order d on csds.dispatch_no = d.dispatch_no");
        extSql.append(" LEFT JOIN cs_order o ON d.order_no = o.order_no");
        // 相同司机取id最大值
        // extSql.append(" where not exists (select csds2.id from cs_dispatch_stowage_log csds2 where csds.dispatch_no=csds2.dispatch_no and csds2.id>csds.id) and 1=1");
        extSql.append(" where csds.id = (select max(csds2.id) from cs_dispatch_stowage_log csds2 where csds.dispatch_no=csds2.dispatch_no and csds.main_drive_code = csds2.main_drive_code) ");
        //extSql.append(" where 1=1");
        
        String dispatch_no=(String)params.get("dispatch_no");
        String order_no=(String)params.get("order_no");
        String order_no_like=(String)params.get("order_no_like");
        String customer_dispatch_no=(String)params.get("customer_dispatch_no");
        String carrier_code=(String)params.get("carrier_code");
        String dispatch_status=(String)params.get("dispatch_status");
        String[] status=(String[])params.get("status");
        String not_status=(String)params.get("not_status");
        String create_time_from = (String)params.get("create_time_from");
        String create_time_to =(String)params.get("create_time_to");
        String vehicle_no=(String)params.get("vehicle_no");
        String main_drive_code=(String)params.get("main_drive_code");
        String main_drive_name=(String)params.get("main_drive_name");
        String tenancy=(String)params.get("tenancy");
        String customer_code=(String)params.get("customer_code");
        List<String> param=new ArrayList<String>();
        if(StringUtils.isNotBlank(dispatch_no)){
        	extSql.append(" and d.dispatch_no like ?");
        	param.add("%"+dispatch_no+"%");
        }
        if(StringUtils.isNotBlank(order_no)){
        	extSql.append(" and d.order_no = ?");
        	param.add(order_no);
        }
        if(StringUtils.isNotBlank(order_no_like)){
        	extSql.append(" and d.order_no like ?");
        	param.add("%" + order_no_like + "%");
        }
        if(StringUtils.isNotBlank(customer_code)){
        	extSql.append(" and d.customer_code = ?");
        	param.add(customer_code);
        }
        if(StringUtils.isNotBlank(customer_dispatch_no)){
        	extSql.append(" and d.customer_dispatch_no like ?");
        	param.add("%"+customer_dispatch_no+"%");
        }
        if(StringUtils.isNotBlank(carrier_code)){
        	extSql.append(" and d.carrier_code=?");
        	param.add(carrier_code);
        }
        if(StringUtils.isNotBlank(dispatch_status)){
        	extSql.append(" and d.dispatch_status = ?");
        	param.add(dispatch_status);
        }
        if (status != null && status.length > 0) {
            extSql.append(" and d.dispatch_status in (");
            for (int i = 0, j = status.length; i < j; i++) {
                extSql.append("?");
                if (i < (j - 1)) {
                    extSql.append(",");
                }
            }
            extSql.append(")");
            for (int i = 0, j = status.length; i < j; i++) {
                param.add(status[i]);
            }
        }
        if (StringUtils.isNotBlank(not_status)) {
        	String[] notStatus = not_status.split(",");
            extSql.append(" and d.dispatch_status not in (");
            for (int i = 0, j = notStatus.length; i < j; i++) {
                extSql.append("?");
                if (i < (j - 1)) {
                    extSql.append(",");
                }
            }
            extSql.append(")");
            for (int i = 0, j = notStatus.length; i < j; i++) {
                param.add(notStatus[i]);
            }
        }
        if(StringUtils.isNotBlank(create_time_from)){
        	extSql.append(" and d.create_time >= ?");
        	param.add(create_time_from + " 00:00:00");
        }
        if(StringUtils.isNotBlank(create_time_to)){
        	extSql.append(" and d.create_time <= ?");
        	param.add(create_time_to + " 23:59:59");
        }
        if(StringUtils.isNotBlank(vehicle_no)){
        	extSql.append(" and d.vehicle_no like ?");
        	param.add("%"+vehicle_no+"%");
        }
        if(StringUtils.isNotBlank(main_drive_code)){
        	extSql.append(" and csds.main_drive_code = ?");
        	param.add(main_drive_code);
        }
        if(StringUtils.isNotBlank(main_drive_name)){
        	extSql.append(" and d.main_drive_name like ?");
        	param.add("%"+main_drive_name+"%");
        }
        if(StringUtils.isNotBlank(tenancy)){
        	extSql.append(" and d.tenancy = ?");
        	param.add(tenancy);
        }
        extSql.append(" order by d.modify_time desc");
        if(param.isEmpty()){
        	return paginate(pageNo, pageSize, selectSql, extSql.toString());

        }else{
        	return paginate(pageNo, pageSize, selectSql, extSql.toString(),param.toArray());
        }
    }
    
    /**
     * 保存或者更新派车单
     * @param csDispatchOrder
     */
    public void saveOrUpdate(CsDispatchOrder csDispatchOrder) {
        if (null == csDispatchOrder.get("id")) {
        	csDispatchOrder.save();
        } else {
        	csDispatchOrder.update();
        }
    }
    
    /**
	 * 根据系统派车单号查询派车单
	 * @param dispatchNos 系统派车单号数组
	 * @return List<CsDispatchOrder>
	 */
	public List<CsDispatchOrder> getDispatchOrdersByDispatchNos(String[] dispatchNos) {
		List<CsDispatchOrder> dispatchOrders = null;
		// 非空判断
		if (null==dispatchNos || dispatchNos.length<1) {
			dispatchOrders = new ArrayList<CsDispatchOrder>();
			return dispatchOrders;
		}
		// 通过系统订单号查询派车单
		StringBuffer sql = new StringBuffer("select t.* from cs_dispatch_order t where t.dispatch_no in ( ");
		for (int i = 0, j = dispatchNos.length; i < j; i++) {
			sql.append("?");
			if (i < (j - 1)) {
				sql.append(",");
			}
		}
		sql.append(")");
		dispatchOrders = find(sql.toString(), dispatchNos);
		return dispatchOrders;
	}
	
	/**
	 * 费率计算时根据派车单ID查询派车单信息
	 * @param id 派车单ID
	 * @return CsDispatchOrder
	 */
	public CsDispatchOrder getDispatchOrdersByCalculate(String id) {
		List<CsDispatchOrder> dispatchOrders;
		
		// 非空判断
		if (StringUtils.isNotBlank(id)) {
			// 通过派车单ID查询出派车单信息
			StringBuffer sql = new StringBuffer("SELECT "
					+ " csdo.*, "
					+ " csdo.create_time as order_time,"
					+ " csor.shipper_province_code,"
					+ " csor.shipper_province_name,"
					+ " csor.shipper_city_code,"
					+ " csor.shipper_city_name,"
					+ " csor.shipper_county_code,"
					+ " csor.shipper_county_name,"
					+ " csor.shipper_address,"
					+ " csor.consignee_province_code,"
					+ " csor.consignee_province_name,"
					+ " csor.consignee_city_code,"
					+ " csor.consignee_city_name,"
					+ " csor.consignee_county_code,"
					+ " csor.consignee_county_name,"
					+ " csor.consignee_address,"
					+ " cscc.contract_code"
					+ " FROM cs_dispatch_order csdo "
					+ " LEFT JOIN cs_customer_contract cscc ON cscc.customer_code = csdo.carrier_code "
					+ " LEFT JOIN cs_order csor ON csor.order_no = csdo.order_no "
					+ " WHERE 1=1 "
					+ " AND csdo.id = ?");
			dispatchOrders = find(sql.toString(), id);
			if(dispatchOrders.isEmpty()){
				return null;
			}
		}else{
			return null;
		}
		
		return dispatchOrders.get(0);
	}
	
	/**
	 * 费用确认时,根据系统派车单号查询派车单信息
	 * @param dispatchNo 系统派车单号
	 * @return CsDispatchOrder
	 */
	public CsDispatchOrder getDispatchOrdersByFeeConfirm(String dispatchNo) {
		List<CsDispatchOrder> dispatchOrders;
		
		// 非空判断
		if (StringUtils.isNotBlank(dispatchNo)) {
			// 通过派车单ID查询出派车单信息
			StringBuffer sql = new StringBuffer("SELECT "
					+ "csdo.*"
					+ " FROM cs_dispatch_order csdo "
					+" WHERE 1=1 "
					+" AND csdo.dispatch_no = ?");
			dispatchOrders = find(sql.toString(), dispatchNo);
			if(dispatchOrders.isEmpty()){
				return null;
			}
		}else{
			return null;
		}
		
		return dispatchOrders.get(0);
	}
	
	/**
     * 获取字符串类型,为空时设置默认值
     * @param value
     * @return
     */
    public String getString(Object value){
    	if(value != null){
    		return value.toString();
    	}else{
    		return "";
    	}
    }
    
    public Double getDefaultDouble(Object value){
    	if(value != null && !value.toString().equals("")){
    		return Double.valueOf(value.toString());
    	}else{
    		return 0D;
    	}
    }
}
