package com.chinaservices.oms.dispatch.model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.chinaservices.oms.cust.model.CsCustomerContract;
import com.chinaservices.oms.fee.model.CsFeeName;
import com.chinaservices.sdk.binding.annotation.Table;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Model;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
@Table(tableName = "cs_dispatch_fee", pkName = "id")
public class CsDispatchFee extends Model<CsDispatchFee>  {
	public static final CsDispatchFee dao = new CsDispatchFee();
	
	/**
     * 分页查询
     *
     * @param params
     * @param pageNo
     * @param pageSize
     * @return
     */
    public Page<CsDispatchFee> getPageByCondition(Map<String, Object> params, int pageNo, int pageSize) {
        String selectSql = "select t.* ";
        StringBuilder extSql = new StringBuilder();
        extSql.append("from cs_dispatch_fee t where 1=1");
        
        String dispatch_no=(String)params.get("dispatch_no");
        String tenancy=(String)params.get("tenancy");
        String pay_or_receive=(String)params.get("pay_or_receive");
        String fee_source = (String)params.get("fee_source");
        String fee_status = (String)params.get("fee_status");
        String balance_code = (String)params.get("balance_code");
        List<String> param=new ArrayList<String>();
        if(StringUtils.isNotBlank(dispatch_no)){
        	extSql.append(" and dispatch_no like ?");
        	param.add("%"+dispatch_no+"%");
        }
        
        if(StringUtils.isNotBlank(tenancy)){
        	extSql.append(" and tenancy = ?");
        	param.add(tenancy);
        }
        if(StringUtils.isNotBlank(pay_or_receive)){
        	extSql.append(" and pay_or_receive = ?");
        	param.add(pay_or_receive);
        }
        if(StringUtils.isNotBlank(fee_source)){
        	extSql.append(" and fee_source = ?");
        	param.add(fee_source);
        }
        if(StringUtils.isNotBlank(balance_code)){
        	extSql.append(" and balance_code = ?");
        	param.add(balance_code);
        }
        //费用状态
        if(StringUtils.isNotBlank(fee_status)){
        	extSql.append(" and fee_status in (");
        	String[] statuses = StringUtils.split(fee_status,",");
        	for (int i = 0; i < statuses.length; i++) {
        		extSql.append("?");
        		param.add(statuses[i]);
                if (i < (statuses.length - 1)) {
                	extSql.append(",");
                }
            }
        	extSql.append(")");
        }
        extSql.append(" order by t.modify_time desc");
        if(param.isEmpty()){
        	return paginate(pageNo, pageSize, selectSql, extSql.toString());

        }else{
        	return paginate(pageNo, pageSize, selectSql, extSql.toString(),param.toArray());
        }
    }
    
    /**
     * 微信费用分页查询
     */
    public Page<CsDispatchFee> getPageByConditionForWx(Map<String, Object> params, int pageNo, int pageSize) {
    	String selectSql = "select t.*,"
		        + "((SELECT count(1) FROM cs_dispatch_attach csda WHERE csda.dispatch_no = t.dispatch_no"
				+ "	AND csda.attach_type = 'fee_attach' and csda.source_unique_no = t.unique_no)"
				+ ") as attach_count ";
        StringBuilder extSql = new StringBuilder();
        extSql.append("from cs_dispatch_fee t where 1=1");
        
        String dispatch_no=(String)params.get("dispatch_no");
        String tenancy=(String)params.get("tenancy");
        String pay_or_receive=(String)params.get("pay_or_receive");
        String fee_source = (String)params.get("fee_source");
        
        List<String> param=new ArrayList<String>();
        if(StringUtils.isNotBlank(dispatch_no)){
        	extSql.append(" and dispatch_no = ?");
        	param.add(dispatch_no);
        }
        if(StringUtils.isNotBlank(fee_source)){
        	extSql.append(" and fee_source = ?");
        	param.add(fee_source);
        }
        if(StringUtils.isNotBlank(tenancy)){
        	extSql.append(" and tenancy = ?");
        	param.add(tenancy);
        }
        if(StringUtils.isNotBlank(pay_or_receive)){
        	extSql.append(" and pay_or_receive = ?");
        	param.add(pay_or_receive);
        }
        extSql.append(" order by t.modify_time desc");
        if(param.isEmpty()){
        	return paginate(pageNo, pageSize, selectSql, extSql.toString());
        }else{
        	return paginate(pageNo, pageSize, selectSql, extSql.toString(),param.toArray());
        }
    }
	
	/**
     * 保存或者更新派车单
     * @param csDispatchOrder
     */
    public void saveOrUpdate(CsDispatchFee csDispatchFee) {
        if (null == csDispatchFee.get("id")) {
        	csDispatchFee.save();
        } else {
        	csDispatchFee.update();
        }
    }
    
    /**
     * 删除费率计算的派车单费用
     */
    public void deleteFeeByDispatchNo(String dispatchNo) {
    	if(StringUtils.isNotBlank(dispatchNo)){
    		String sql = "DELETE FROM cs_dispatch_fee WHERE 1=1 AND dispatch_no = ? AND fee_source = ? ";
            Db.update(sql, dispatchNo, "20");
		}
    }
    
    /**
   	 * 费率计算生成费用信息--临时客户
   	 * @param passRateFees 		费率费用信息
   	 * @param csDispatchOrder 	派车单信息
   	 */
   	public String generateDispatchFeeByTemporary(CsDispatchFee csDispatchFee,CsDispatchOrder csDispatchOrder) {
   		//错误信息
   		StringBuilder errorMsg = new StringBuilder("");
   		
   		// 非空判断
   		if (csDispatchOrder != null) {
   			//获取派车单的装货量、卸货量、计费节点、临时计费费用
   	    	Double loadAmount = csDispatchOrder.getBigDecimal("load_amount").doubleValue();
   			Double unLoadAmount = csDispatchOrder.getBigDecimal("unload_amount").doubleValue();
   			String charge_node = csDispatchOrder.getStr("charge_node");
   			String temporary_charge_protocol = csDispatchOrder.getStr("temporary_charge_protocol");
   	    	Double temporary_charge_cost = getDefaultDouble(csDispatchOrder.getBigDecimal("temporary_charge_cost"));
   	    	
   	    	//根据计费节点,获取派车单的计费重量
   			Double calculateCount = 0D;
   			if("unload".equals(charge_node)){
   				//卸货磅重
   				calculateCount = unLoadAmount;
   			}else{
   				//装货磅重
   				calculateCount = loadAmount;
   			}

			csDispatchFee.set("fee_type", "transport_fee");//费用类型--运输费用
   			csDispatchFee.set("pay_or_receive", "01");//收付类型--应收
   	   		csDispatchFee.set("dispatch_no", csDispatchOrder.getStr("dispatch_no"));
   			csDispatchFee.set("fee_code", "inbound_fee");//费用名称编码 ""改为inbound_fee
   			csDispatchFee.set("fee_name", "运费");//费用名称
   			//应收--结算方式与订单保持一致
			//csDispatchFee.set("account_type", csDispatchOrder.getStr("account_type"));//结算方式
			csDispatchFee.set("balance_code", csDispatchOrder.getStr("customer_code"));//客户编码
   			csDispatchFee.set("balance_name", csDispatchOrder.getStr("customer_name"));//客户名称
   			csDispatchFee.set("occur_time", new Date());
   			csDispatchFee.set("fee_status", "00");
   			csDispatchFee.set("fee_source", "20");
   			csDispatchFee.set("currency", "01");//币别--人民币
   			
   			csDispatchFee.set("id", null);
   			
   			//临时客户--根据临时计费协议进行计费
			if("one_unit_price".equals(temporary_charge_protocol)){
				//一口单价
				csDispatchFee.set("count", calculateCount);//数量
	   			csDispatchFee.set("unit_price",getDefaultDouble(temporary_charge_cost));//单价
				csDispatchFee.set("remark", "一口价");//备注
				//计算总费用
	   			Double totalAmount = getDefaultDouble(temporary_charge_cost).doubleValue()*calculateCount.doubleValue();
	   			csDispatchFee.set("total_amount", totalAmount);//总费用
			}else if("chartered_price".equals(temporary_charge_protocol)){
				//包车总价
	   			csDispatchFee.set("total_amount", getDefaultDouble(temporary_charge_cost));//总费用
				csDispatchFee.set("remark", "包车价");//备注
			}
   			
   			//保存费用信息
   			saveOrUpdate(csDispatchFee);
   			
   		}
   		return errorMsg.toString();
   	}
    
    /**
   	 * 费率计算生成费用信息--合同客户
   	 * @param passRateFees 		费率费用信息
   	 * @param csDispatchOrder 	派车单信息
   	 * @return List<CsDispatchFee>
   	 */
   	public String generateDispatchFee(CsDispatchFee csDispatchFee,CsCustomerContract passRateFee,CsDispatchOrder csDispatchOrder,Double calculateCount) {
   		//错误信息
   		StringBuilder errorMsg = new StringBuilder("");
   		
   		// 非空判断
   		if (passRateFee != null && csDispatchOrder != null) {
   			//费用名称编码
   			String feeNameCode = passRateFee.getStr("fee_name_code");
   			
   			//保底价
   			Double reservePrice = passRateFee.getBigDecimal("reserve_price").doubleValue();

   			//查询费用名称相关信息
   			CsFeeName feeName = null;
   			if(StringUtils.isNotBlank(feeNameCode)){
   				feeName = CsFeeName.dao.getFeeNameByCode(feeNameCode);
   			}

   			//生成费用信息
   			if(feeName != null){
   				//收付类型
   				csDispatchFee.set("fee_type", feeName.getStr("fee_type"));
	   	   		csDispatchFee.set("dispatch_no", csDispatchOrder.getStr("dispatch_no"));
	   			csDispatchFee.set("fee_code", feeNameCode);
	   			csDispatchFee.set("fee_name", passRateFee.getStr("fee_name"));
	   			//应付--默认结算方式为承运商(若为司机时,则将值改为10即可)
   				//csDispatchFee.set("account_type", "20");
   				csDispatchFee.set("balance_code", csDispatchOrder.getStr("carrier_code"));
	   			csDispatchFee.set("balance_name", csDispatchOrder.getStr("carrier_name"));
	   			
	   			//获取计算的数量,派车单状态
	   			Double dispatchStatus = getDefaultDouble(getString(csDispatchOrder.getStr("status")));
	   			
	   			//若派车单为装货确认之后的状态,则取实际装货量进行计算,否则取计划量进行计算
	   			if(dispatchStatus >= 40){
	   				calculateCount = getBigDecimal(csDispatchOrder.getBigDecimal("load_amount")).doubleValue();
	   			}else{
	   				calculateCount = getBigDecimal(csDispatchOrder.getBigDecimal("plan_amount")).doubleValue();
	   			}
	   			
	   			csDispatchFee.set("count", calculateCount);
	   			csDispatchFee.set("unit_price",getBigDecimal(passRateFee.getBigDecimal("fee_unit")));
	   			
	   			//计算总费用
	   			Double totalAmount = getBigDecimal(passRateFee.getBigDecimal("fee_unit")).doubleValue()*calculateCount.doubleValue();
	   			
	   			//若总费用小于保底价,则费用金额为保底价
	   			if(totalAmount.doubleValue() < reservePrice){
	   				csDispatchFee.set("total_amount", reservePrice);
	   			}else{
	   				csDispatchFee.set("total_amount", totalAmount);
	   			}
	   			csDispatchFee.set("occur_time", new Date());
	   			csDispatchFee.set("fee_status", "00");
	   			csDispatchFee.set("fee_source", "20");
	   			csDispatchFee.set("currency", feeName.getStr("currency"));
	   			csDispatchFee.set("id", null);
	   			
	   			//保存费用信息
	   			saveOrUpdate(csDispatchFee);
   			}else{
   				errorMsg.append("费用名称("+passRateFee.getStr("fee_name")+")未找到,不能生成此费用的派车单费用明细");
   			}
   		}
   		return errorMsg.toString();
   	}
    
    /**
	 * 根据系统派车单号查询派车单应收费用
	 * @param dispatchNo 系统派车单号
	 * @return List<CsDispatchFee>
	 */
	public List<CsDispatchFee> getDispatchFeeByDispatchNos(String dispatchNo) {
		List<CsDispatchFee> dispatchFees;
		// 非空判断
		if (StringUtils.isNotBlank(dispatchNo)) {
			// 通过系统派车单号查询派车单费用信息
			StringBuffer sql = new StringBuffer("select t.* from cs_dispatch_fee t where t.dispatch_no = ?");
			dispatchFees = this.dao.find(sql.toString(), dispatchNo);
		}else{
			dispatchFees = new ArrayList<CsDispatchFee>();
			return dispatchFees;
		}
		return dispatchFees;
	}
	
	public String getString(String value){
    	if(StringUtils.isNotBlank(value)){
    		return value;
    	}else{
    		return "";
    	}
    }
	
	public Double getDefaultDouble(Object value){
    	if(value != null){
    		return Double.valueOf(value.toString());
    	}else{
    		return 0D;
    	}
    }
	/**
     * 获取字符串类型,为空时设置默认值
     * @param value
     * @return
     */
    public BigDecimal getBigDecimal(BigDecimal value){
    	if(value != null){
    		return value;
    	}else{
    		return new BigDecimal(0);
    	}
    }
    
    /**
     * 查找费用信息
     * @param dispatchNo
     */
    public List<Record> findByCondition(Map<String, Object> params){
    	String dispatch_no =(String)params.get("dispatch_no");
        String pay_or_receive =(String)params.get("pay_or_receive");
 		StringBuilder sql = new StringBuilder();
    	sql.append("select t.*,csdo.vehicle_no,");
		sql.append("csdo.shipper_province,csdo.shipper_city,csdo.shipper_county,csdo.shipper_address,");
		sql.append("csdo.consignee_province,csdo.consignee_city,csdo.consignee_county,csdo.consignee_address ");
		sql.append("from cs_dispatch_fee t ");
		sql.append("left join cs_dispatch_order csdo on csdo.dispatch_no = t.dispatch_no ");
		sql.append("where 1=1 ");
    	List<String> param = new ArrayList<String>();
    	if(StringUtils.isNotBlank(dispatch_no)){
    		sql.append("and t.dispatch_no = '"+dispatch_no+"' ");
    	}else{
    		return null;
    	}
    	if(StringUtils.isNotBlank(pay_or_receive)){
    		sql.append("and t.pay_or_receive = '"+pay_or_receive+"' ");
    		param.add(pay_or_receive);
    	}
    	List<Record> list = Db.find(sql.toString());
     	if(list.size()>0){
     		return list;
     	}else{
     		return null;
     	}    	
    }
	
    /**
     * 通过ID查找应付费用
     * @param id
     */
    public CsDispatchFee findPayFeeById(Integer id){
    	StringBuilder sql = new StringBuilder();
    	sql.append("  select t.*,csdo.order_no,csdo.distribution_no ");  	
    	sql.append(" from cs_dispatch_fee t ");
    	sql.append(" left join cs_dispatch_order csdo on csdo.dispatch_no = t.dispatch_no ");
    	sql.append(" where 1=1 ");
        sql.append(" and t.id = ?");
    	return findFirst(sql.toString(), id);
    }
    
    /**
     * 删除派车单费用信息中对应的账单号
     * @param id
     */
    public void deleteDispatchFeeByUniqueNo(String uniqueNo){
    	String sql = "update cs_dispatch_fee set bill_no=null,rec_ver=rec_ver+1 where unique_no=?";
    	Db.update(sql, uniqueNo);
    }
    
    /**
     * 分页查询
     *
     * @param params
     * @param pageNo
     * @param pageSize
     * @return
     */
    public Page<CsDispatchFee> queryDispatchFee(Map<String, Object> params, int pageNo, int pageSize) {
        String selectSql = "select t.*,csdo.order_no,csdo.distribution_no ";
        StringBuilder extSql = new StringBuilder();
        extSql.append(" from cs_dispatch_fee t left join cs_dispatch_order csdo on csdo.dispatch_no = t.dispatch_no where 1=1 and bill_no is null ");
        
        String dispatch_no=(String)params.get("dispatch_no");
        String order_no=(String)params.get("order_no");
        String distribution_no=(String)params.get("distribution_no");
        String account_period = (String)params.get("account_period");
        String occur_time_from = (String)params.get("occur_time_from");
        String occur_time_to = (String)params.get("occur_time_to");
        List<String> param=new ArrayList<String>();
        if(StringUtils.isNotBlank(dispatch_no)){
        	extSql.append(" and dispatch_no like ?");
        	param.add("%"+dispatch_no+"%");
        }
        
        if(StringUtils.isNotBlank(order_no)){
        	extSql.append(" and dispatch_no in (select dispatch_no from cs_dispatch_order where order_no = ?)");
        	param.add(order_no);
        }
        if(StringUtils.isNotBlank(distribution_no)){
        	extSql.append(" and dispatch_no in (select distribution_no from cs_dispatch_order where distribution_no = ?)");
        	param.add(distribution_no);
        }
        if(StringUtils.isNotBlank(account_period)){
        	extSql.append(" and account_period = ?");
        	param.add(account_period);
        }
        if(StringUtils.isNotBlank(occur_time_from)){
        	extSql.append(" and occur_time >= ?");
        	param.add(occur_time_from);
        }
        if(StringUtils.isNotBlank(occur_time_to)){
        	extSql.append(" and occur_time <= ?");
        	param.add(occur_time_to);
        }
        extSql.append(" order by t.modify_time desc");
        if(param.isEmpty()){
        	return paginate(pageNo, pageSize, selectSql, extSql.toString());

        }else{
        	return paginate(pageNo, pageSize, selectSql, extSql.toString(),param.toArray());
        }
    }
}
